
// Imports
use rust_decimal_macros::dec;
use rust_decimal::prelude::*;

// Modules
use crate::multiplex::types::{ Multiplex };
use crate::error::Error;

//##########################################################################################################################

const D0: Decimal = dec!(0);

//##########################################################################################################################

const LFAC: [Decimal; 30] = [
    dec!(1),
    dec!(1),
    dec!(2),
    dec!(6),
    dec!(24),
    dec!(120),
    dec!(720),
    dec!(5040),
    dec!(40320),
    dec!(362880),
    dec!(3628800),
    dec!(39916800),
    dec!(479001600),
    dec!(6227020800),
    dec!(87178291200),
    dec!(1307674368000),
    dec!(20922789888000),
    dec!(355687428096000),
    dec!(6402373705728000),
    dec!(121645100408832000),
    dec!(2432902008176640000),
    dec!(51090942171709440000),
    dec!(1124000727777607680000),
    dec!(25852016738884976640000),
    dec!(620448401733239439360000),
    dec!(15511210043330985984000000),
    dec!(403291461126605635584000000),
    dec!(10888869450418352160768000000),
    dec!(0),
    dec!(0),
];

//##########################################################################################################################

#[inline]
pub fn fac(value: usize) -> Result<Decimal, Error> {
    if value > 27 { return Err(Error::InputOutOfRange) };
    Ok(LFAC[value])
}

//##########################################################################################################################

const M_LFAC: [[Decimal; 30]; 10] = [
    LFAC,[
        dec!(28),
        dec!(812),
        dec!(24360),
        dec!(755160),
        dec!(24165120),
        dec!(797448960),
        dec!(27113264640),
        dec!(948964262400),
        dec!(34162713446400),
        dec!(1264020397516800),
        dec!(48032775105638400),
        dec!(1873278229119897600),
        dec!(74931129164795904000),
        dec!(3072176295756632064000),
        dec!(129031404421778546688000),
        dec!(5548350390136477507584000),
        dec!(244127417166005010333696000),
        dec!(10985733772470225465016320000),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
    ],[
        dec!(46),
        dec!(2162),
        dec!(103776),
        dec!(5085024),
        dec!(254251200),
        dec!(12966811200),
        dec!(674274182400),
        dec!(35736531667200),
        dec!(1929772710028800),
        dec!(106137499051584000),
        dec!(5943699946888704000),
        dec!(338790896972656128000),
        dec!(19649872024414055424000),
        dec!(1159342449440429270016000),
        dec!(69560546966425756200960000),
        dec!(4243193364951971128258560000),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
    ],[
        dec!(62),
        dec!(3906),
        dec!(249984),
        dec!(16248960),
        dec!(1072431360),
        dec!(71852901120),
        dec!(4885997276160),
        dec!(337133812055040),
        dec!(23599366843852800),
        dec!(1675555045913548800),
        dec!(120639963305775513600),
        dec!(8806717321321612492800),
        dec!(651697081777799324467200),
        dec!(48877281133334949335040000),
        dec!(3714673366133456149463040000),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
    ],[
        dec!(77),
        dec!(6006),
        dec!(474474),
        dec!(37957920),
        dec!(3074591520),
        dec!(252116504640),
        dec!(20925669885120),
        dec!(1757756270350080),
        dec!(149409282979756800),
        dec!(12849198336259084800),
        dec!(1117880255254540377600),
        dec!(98373462462399553228800),
        dec!(8755238159153560237363200),
        dec!(787971434323820421362688000),
        dec!(71705400523467658344004608000),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
    ],[
        dec!(92),
        dec!(8556),
        dec!(804264),
        dec!(76405080),
        dec!(7334887680),
        dec!(711484104960),
        dec!(69725442286080),
        dec!(6902818786321920),
        dec!(690281878632192000),
        dec!(69718469741851392000),
        dec!(7111283913668841984000),
        dec!(732462243107890724352000),
        dec!(76176073283220635332608000),
        dec!(7998487694738166709923840000),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
    ],[
        dec!(106),
        dec!(11342),
        dec!(1224936),
        dec!(133518024),
        dec!(14686982640),
        dec!(1630255073040),
        dec!(182588568180480),
        dec!(20632508204394240),
        dec!(2352105935300943360),
        dec!(270492182559608486400),
        dec!(31377093176914584422400),
        dec!(3671119901699006377420800),
        dec!(433192148400482752535654400),
        dec!(51549865659657447551742873600),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
    ],[
        dec!(120),
        dec!(14520),
        dec!(1771440),
        dec!(217887120),
        dec!(27018002880),
        dec!(3377250360000),
        dec!(425533545360000),
        dec!(54042760260720000),
        dec!(6917473313372160000),
        dec!(892354057425008640000),
        dec!(116006027465251123200000),
        dec!(15196789597947897139200000),
        dec!(2005976226929122422374400000),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
    ],[
        dec!(133),
        dec!(17822),
        dec!(2405970),
        dec!(327211920),
        dec!(44828033040),
        dec!(6186268559520),
        dec!(859891329773280),
        dec!(120384786168259200),
        dec!(16974254849724547200),
        dec!(2410344188660885702400),
        dec!(344679218978506655443200),
        dec!(49633807532904958383820800),
        dec!(7196902092271218965654016000),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
    ],[
        dec!(146),
        dec!(21462),
        dec!(3176376),
        dec!(473280024),
        dec!(70992003600),
        dec!(10719792543600),
        dec!(1629408466627200),
        dec!(249299495393961600),
        dec!(38392122290670086400),
        dec!(5950778955053863392000),
        dec!(928321516988402689152000),
        dec!(145746478167179222196864000),
        dec!(23027943550414317107104512000),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
        dec!(0),
    ]
];

//##########################################################################################################################

const fn get_len(arr: [[Decimal; 30]; 10]) -> [usize; 10] {
    let mut result: [usize; 10] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    let mut i: usize = 0;
    loop {
        if i >= arr.len() {break};
        let mut n: usize = 0;
        loop {
            if n >= arr[i].len() {break};
            if arr[i][n].is_zero() {break};
            result[i] = n + 1;
            n = n + 1;
        };
        i = i + 1;
    };
    result
}

const M_LFAC_LEN: [usize; 10] = get_len(M_LFAC);

//##########################################################################################################################

#[inline]
pub fn m_fac(value: usize) -> Multiplex {
    let mut result = Multiplex::new();
    let mut acc: usize = 0;
    // Iterate over Factorials
    let mut i: usize = 0;
    loop {
        if i >= M_LFAC.len() {break};
        let next: usize = acc + M_LFAC_LEN[i];
        let cond_next: bool = next <= value;
        let cond_current: bool = (acc <= value) && (value < next);
        let index = (
            if cond_current {value - acc}
            else if cond_next {M_LFAC_LEN[i] - 1}
            else {0}
        );
        if cond_current || cond_next {
            result = result * M_LFAC[i][index];
        };
        acc = next;
        i = i + 1;
    };
    // Return result
    result
}

//##########################################################################################################################
