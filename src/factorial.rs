
// Imports
use rust_decimal_macros::dec;
use rust_decimal::prelude::*;

// Modules
use crate::multiplex::types::{ Multiplex };
use crate::error::Error;

//##########################################################################################################################

const LFAC_LEN: [usize; 18] = [28, 18, 16, 15, 15, 14, 14, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12];

//##########################################################################################################################

const LFAC: [Decimal; 274] = [
    dec!(1),
    dec!(1),
    dec!(2),
    dec!(6),
    dec!(24),
    dec!(120),
    dec!(720),
    dec!(5040),
    dec!(40320),
    dec!(362880),
    dec!(3628800),
    dec!(39916800),
    dec!(479001600),
    dec!(6227020800),
    dec!(87178291200),
    dec!(1307674368000),
    dec!(20922789888000),
    dec!(355687428096000),
    dec!(6402373705728000),
    dec!(121645100408832000),
    dec!(2432902008176640000),
    dec!(51090942171709440000),
    dec!(1124000727777607680000),
    dec!(25852016738884976640000),
    dec!(620448401733239439360000),
    dec!(15511210043330985984000000),
    dec!(403291461126605635584000000),
    dec!(10888869450418352160768000000),
    dec!(0),
    dec!(28),
    dec!(812),
    dec!(24360),
    dec!(755160),
    dec!(24165120),
    dec!(797448960),
    dec!(27113264640),
    dec!(948964262400),
    dec!(34162713446400),
    dec!(1264020397516800),
    dec!(48032775105638400),
    dec!(1873278229119897600),
    dec!(74931129164795904000),
    dec!(3072176295756632064000),
    dec!(129031404421778546688000),
    dec!(5548350390136477507584000),
    dec!(244127417166005010333696000),
    dec!(10985733772470225465016320000),
    dec!(0),
    dec!(46),
    dec!(2162),
    dec!(103776),
    dec!(5085024),
    dec!(254251200),
    dec!(12966811200),
    dec!(674274182400),
    dec!(35736531667200),
    dec!(1929772710028800),
    dec!(106137499051584000),
    dec!(5943699946888704000),
    dec!(338790896972656128000),
    dec!(19649872024414055424000),
    dec!(1159342449440429270016000),
    dec!(69560546966425756200960000),
    dec!(4243193364951971128258560000),
    dec!(0),
    dec!(62),
    dec!(3906),
    dec!(249984),
    dec!(16248960),
    dec!(1072431360),
    dec!(71852901120),
    dec!(4885997276160),
    dec!(337133812055040),
    dec!(23599366843852800),
    dec!(1675555045913548800),
    dec!(120639963305775513600),
    dec!(8806717321321612492800),
    dec!(651697081777799324467200),
    dec!(48877281133334949335040000),
    dec!(3714673366133456149463040000),
    dec!(0),
    dec!(77),
    dec!(6006),
    dec!(474474),
    dec!(37957920),
    dec!(3074591520),
    dec!(252116504640),
    dec!(20925669885120),
    dec!(1757756270350080),
    dec!(149409282979756800),
    dec!(12849198336259084800),
    dec!(1117880255254540377600),
    dec!(98373462462399553228800),
    dec!(8755238159153560237363200),
    dec!(787971434323820421362688000),
    dec!(71705400523467658344004608000),
    dec!(0),
    dec!(92),
    dec!(8556),
    dec!(804264),
    dec!(76405080),
    dec!(7334887680),
    dec!(711484104960),
    dec!(69725442286080),
    dec!(6902818786321920),
    dec!(690281878632192000),
    dec!(69718469741851392000),
    dec!(7111283913668841984000),
    dec!(732462243107890724352000),
    dec!(76176073283220635332608000),
    dec!(7998487694738166709923840000),
    dec!(0),
    dec!(106),
    dec!(11342),
    dec!(1224936),
    dec!(133518024),
    dec!(14686982640),
    dec!(1630255073040),
    dec!(182588568180480),
    dec!(20632508204394240),
    dec!(2352105935300943360),
    dec!(270492182559608486400),
    dec!(31377093176914584422400),
    dec!(3671119901699006377420800),
    dec!(433192148400482752535654400),
    dec!(51549865659657447551742873600),
    dec!(0),
    dec!(120),
    dec!(14520),
    dec!(1771440),
    dec!(217887120),
    dec!(27018002880),
    dec!(3377250360000),
    dec!(425533545360000),
    dec!(54042760260720000),
    dec!(6917473313372160000),
    dec!(892354057425008640000),
    dec!(116006027465251123200000),
    dec!(15196789597947897139200000),
    dec!(2005976226929122422374400000),
    dec!(0),
    dec!(133),
    dec!(17822),
    dec!(2405970),
    dec!(327211920),
    dec!(44828033040),
    dec!(6186268559520),
    dec!(859891329773280),
    dec!(120384786168259200),
    dec!(16974254849724547200),
    dec!(2410344188660885702400),
    dec!(344679218978506655443200),
    dec!(49633807532904958383820800),
    dec!(7196902092271218965654016000),
    dec!(0),
    dec!(146),
    dec!(21462),
    dec!(3176376),
    dec!(473280024),
    dec!(70992003600),
    dec!(10719792543600),
    dec!(1629408466627200),
    dec!(249299495393961600),
    dec!(38392122290670086400),
    dec!(5950778955053863392000),
    dec!(928321516988402689152000),
    dec!(145746478167179222196864000),
    dec!(23027943550414317107104512000),
    dec!(0),
    dec!(159),
    dec!(25440),
    dec!(4095840),
    dec!(663526080),
    dec!(108154751040),
    dec!(17737379170560),
    dec!(2926667563142400),
    dec!(485826815481638400),
    dec!(81133078185433612800),
    dec!(13630357135152846950400),
    dec!(2303530355840831134617600),
    dec!(391600160492941292884992000),
    dec!(66963627444292961083333632000),
    dec!(0),
    dec!(172),
    dec!(29756),
    dec!(5177544),
    dec!(906070200),
    dec!(159468355200),
    dec!(28225898870400),
    dec!(5024209998931200),
    dec!(899333589808684800),
    dec!(161880046165563264000),
    dec!(29300288355966950784000),
    dec!(5332652480785985042688000),
    dec!(975875403983835262811904000),
    dec!(0),
    dec!(184),
    dec!(34040),
    dec!(6331440),
    dec!(1183979280),
    dec!(222588104640),
    dec!(42069151776960),
    dec!(7993138837622400),
    dec!(1526689517985878400),
    dec!(293124387453288652800),
    dec!(56573006778484709990400),
    dec!(10975163315026033738137600),
    dec!(2140156846430076578936832000),
    dec!(0),
    dec!(196),
    dec!(38612),
    dec!(7645176),
    dec!(1521390024),
    dec!(304278004800),
    dec!(61159878964800),
    dec!(12354295550889600),
    dec!(2507921996830588800),
    dec!(511616087353440115200),
    dec!(104881297907455223616000),
    dec!(21605547368935776064896000),
    dec!(4472348305369705645433472000),
    dec!(0),
    dec!(208),
    dec!(43472),
    dec!(9129120),
    dec!(1926244320),
    dec!(408363795840),
    dec!(86981488513920),
    dec!(18614038541978880),
    dec!(4002018286525459200),
    dec!(864435949889499187200),
    dec!(187582601126021323622400),
    dec!(40893007045472648549683200),
    dec!(8955568542958510032380620800),
    dec!(0),
    dec!(220),
    dec!(48620),
    dec!(10793640),
    dec!(2406981720),
    dec!(539163905280),
    dec!(121311878688000),
    dec!(27416484583488000),
    dec!(6223542000451776000),
    dec!(1418967576103004928000),
    dec!(324943574927588128512000),
    dec!(74737022233345269557760000),
    dec!(17264252135902757267842560000),
    dec!(0),
    dec!(232),
    dec!(54056),
    dec!(12649104),
    dec!(2972539440),
    dec!(701519307840),
    dec!(166260075958080),
    dec!(39569898078023040),
    dec!(9457205640647506560),
    dec!(2269729353755401574400),
    dec!(547004774255051779430400),
    dec!(132375155369722530622156800),
    dec!(32167162754842574941184102400),
    dec!(0),
    dec!(244),
    dec!(59780),
    dec!(14705880),
    dec!(3632352360),
    dec!(900823385280),
    dec!(224305022934720),
    dec!(56076255733680000),
    dec!(14075140189153680000),
    dec!(3546935327666727360000),
    dec!(897374637899682022080000),
    dec!(227933158026519233608320000),
    dec!(58122955296762404570121600000),
    dec!(0),
];

//##########################################################################################################################

#[inline]
pub fn fac(value: usize) -> Result<Decimal, Error> {
    if value > 27 { return Err(Error::InputOutOfRange) };
    Ok(LFAC[value])
}

//##########################################################################################################################

#[inline]
pub fn m_fac(value: usize) -> Result<Multiplex, Error> {
    if value > 255 { return Err(Error::InputOutOfRange) };
    // Set Variables
    let mut result = Multiplex::new();
    let mut acc: usize = 0;
    // Iterate over Factorials
    let mut i: usize = 0;
    loop {
        if i >= LFAC_LEN.len() {break};
        if LFAC_LEN[i] == 0 {break};
        let next: usize = acc + LFAC_LEN[i];
        let cond_next: bool = next <= value;
        let cond_current: bool = (acc <= value) && (value < next);
        let index =
            if cond_current {value + i}
            else if cond_next {next - 1 + i}
            else {0};
        if cond_current || cond_next {
            result.mul.push(LFAC[index]);
        };
        acc = next;
        i = i + 1;
    };
    // Return result
    Ok(result)
}

//##########################################################################################################################
